rules:
  - id: tainted-sql-string
    languages:
      - java
    message:
      User data flows into this manually-constructed SQL string. User data can
      be safely inserted into SQL strings using prepared statements or an object-relational
      mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
      injection, which could let an attacker steal or manipulate data from the database.
      Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: '"$SQLSTR" + ...

                  '
              - pattern: '"$SQLSTR".concat(...)

                  '
              - patterns:
                  - pattern-inside:
                      'StringBuilder $SB = new StringBuilder("$SQLSTR");

                      ...

                      '
                  - pattern: $SB.append(...)
              - patterns:
                  - pattern-inside: '$VAR = "$SQLSTR";

                      ...

                      '
                  - pattern: $VAR += ...
              - pattern: String.format("$SQLSTR", ...)
              - patterns:
                  - pattern-inside: 'String $VAR = "$SQLSTR";

                      ...

                      '
                  - pattern: String.format($VAR, ...)
          - pattern-not-inside: System.out.println(...)
          - pattern-not-inside: $LOG.info(...)
          - pattern-not-inside: $LOG.warn(...)
          - pattern-not-inside: $LOG.warning(...)
          - pattern-not-inside: $LOG.debug(...)
          - pattern-not-inside: $LOG.debugging(...)
          - pattern-not-inside: $LOG.error(...)
          - metavariable-regex:
              metavariable: $SQLSTR
              regex: (?i)(select|delete|insert|create|update|alter|drop)\b
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside:
                  "$METHODNAME(..., @$REQ($LOOKUP) $TYPE $SOURCE,...) {\n  ...\n\
                  }\n"
              - pattern-inside: "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n}\n"
          - metavariable-regex:
              metavariable: $REQ
              regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
          - pattern: $SOURCE
    severity: ERROR
  - id: formatted-sql-string
    languages:
      - java
    message:
      Detected a formatted string in a SQL statement. This could lead to SQL
      injection if variables in the SQL statement are not properly sanitized. Use a
      prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
      using 'connection.prepareStatement'.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern-not: $S.$SQLFUNC(<... "=~/.*TABLE *$/" ...>)
          - pattern-not: $S.$SQLFUNC(<... "=~/.*TABLE %s$/" ...>)
          - pattern-either:
              - pattern: (Statement $S).$SQLFUNC(...)
              - pattern: (Connection $C).createStatement(...).$SQLFUNC(...)
              - pattern: (EntityManager $EM).$SQLFUNC(...)
          - metavariable-regex:
              metavariable: $SQLFUNC
              regex: execute|executeQuery|createQuery|query
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: "(HttpServletRequest $REQ)

                  "
              - pattern: "(ServletRequest $REQ)

                  "
              - patterns:
                  - pattern-either:
                      - pattern-inside:
                          "$METHODNAME(..., @$REQ($LOOKUP) $TYPE $SOURCE,...) {\n\
                          \  ...\n}\n"
                      - pattern-inside:
                          "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n\
                          }\n"
                  - metavariable-regex:
                      metavariable: $REQ
                      regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
                  - pattern: $SOURCE
    severity: ERROR
  - id: jdbc-sql-formatted-string
    languages:
      - java
    message:
      'Possible JDBC injection detected. Use the parameterized query feature
      available in queryForObject instead of concatenating or formatting strings: ''jdbc.queryForObject("select
      * from table where name = ?", Integer.class, parameterName);'''
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern-inside: "$JDBC = new JdbcTemplate(...);

              ...

              "
          - pattern: $JDBC.$JDBCFUNC(...);
          - metavariable-regex:
              metavariable: $JDBCFUNC
              regex: queryForObject|queryForList|update|execute|insert
    pattern-sources:
      - pattern: "(HttpServletRequest $REQ)

          "
      - pattern: "(ServletRequest $REQ)

          "
    severity: WARNING
  - id: jdbctemplate-sqli
    languages:
      - java
    message:
      User data flows into this manually-constructed SQL string. User data can
      be safely inserted into SQL strings using prepared statements or an object-relational
      mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
      injection, which could let an attacker steal or manipulate data from the database.
      Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern: $SQL
          - pattern-inside:
              (org.springframework.jdbc.core.JdbcTemplate $JT).$METHOD($SQL,
              ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(batchUpdate|execute|query|queryForList|queryForMap|queryForObject|queryForRowSet|queryForStream|update)$
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside:
                  "$METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n  ...\n\
                  }\n"
              - pattern-inside: "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n}\n"
          - metavariable-regex:
              metavariable: $REQ
              regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
          - pattern: $SOURCE
    severity: ERROR
  - id: jpa-sqli
    languages:
      - java
    message:
      User data flows into this manually-constructed SQL string. User data can
      be safely inserted into SQL strings using prepared statements or an object-relational
      mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
      injection, which could let an attacker steal or manipulate data from the database.
      Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern: $SQL
          - pattern-either:
              - pattern-inside: (javax.persistence.EntityManager $EM).createQuery($SQL,...)
              - pattern-inside: (javax.persistence.EntityManager $EM).createNativeQuery($SQL,...)
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside:
                  "$METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n  ...\n\
                  }\n"
              - pattern-inside: "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n}\n"
          - metavariable-regex:
              metavariable: $REQ
              regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
          - pattern: $SOURCE
    severity: ERROR
  - id: jdo-sqli
    languages:
      - java
    message:
      User data flows into this manually-constructed SQL string. User data can
      be safely inserted into SQL strings using prepared statements or an object-relational
      mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
      injection, which could let an attacker steal or manipulate data from the database.
      Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern: $SQL
          - pattern-either:
              - pattern-inside: (javax.jdo.PersistenceManager $PM).newQuery(..., $SQL)
              - pattern-inside: (javax.jdo.Query $Q).setFilter($SQL, ...)
              - pattern-inside: (javax.jdo.Query $Q).setGrouping($SQL, ...)
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside:
                  "$METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n  ...\n\
                  }\n"
              - pattern-inside: "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n}\n"
          - metavariable-regex:
              metavariable: $REQ
              regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
          - pattern: $SOURCE
    severity: ERROR
  - id: hibernate-sqli
    languages:
      - java
    message:
      User data flows into this manually-constructed SQL string. User data can
      be safely inserted into SQL strings using prepared statements or an object-relational
      mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
      injection, which could let an attacker steal or manipulate data from the database.
      Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern: $SQL
          - pattern-either:
              - pattern: (javax.persistence.EntityManager $EM).createQuery($SQL,...)
              - pattern: (javax.persistence.EntityManager $EM).createSQLQuery($SQL,...)
              - pattern: (org.hibernate.Session $S).createQuery($SQL,...)
              - pattern: (org.hibernate.Session $S).createSQLQuery($SQL,...)
              - pattern: (org.hibernate.SessionFactory $SF).getCurrentSession(...).createQuery($SQL,...)
              - pattern: (org.hibernate.SessionFactory $SF).getCurrentSession(...).createSQLQuery($SQL,...)
              - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($SQL,...)
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside:
                  "$METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n  ...\n\
                  }\n"
              - pattern-inside: "$METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n  ...\n}\n"
          - metavariable-regex:
              metavariable: $REQ
              regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
          - pattern: $SOURCE
    severity: ERROR
  - id: tainted-sql-from-http-request
    languages:
      - java
    message:
      Detected input from a HTTPServletRequest going into a SQL sink or statement.
      This could lead to SQL injection if variables in the SQL statement are not properly
      sanitized. Use parameterized SQL queries or properly sanitize user input instead.
    metadata:
      interfile: true
    mode: taint
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: "(java.sql.CallableStatement $STMT) = ...; \n"
              - pattern: "(java.sql.Statement $STMT) = ...;

                  ...

                  $OUTPUT = $STMT.$FUNC(...);

                  "
              - pattern: "(java.sql.PreparedStatement $STMT) = ...;

                  "
              - pattern: "$VAR = $CONN.prepareStatement(...)

                  "
              - pattern: "$PATH.queryForObject(...);

                  "
              - pattern:
                  "(java.util.Map<String, Object> $STMT) = $PATH.queryForMap(...);

                  "
              - pattern:
                  "(org.springframework.jdbc.support.rowset.SqlRowSet $STMT) = ...;

                  "
              - patterns:
                  - pattern-inside: '(String $SQL) = "$SQLSTR" + ...;

                      ...

                      '
                  - pattern: $PATH.$SQLCMD(..., $SQL, ...);
                  - metavariable-regex:
                      metavariable: $SQLSTR
                      regex: (?i)(^SELECT.* | ^INSERT.* | ^UPDATE.*)
                  - metavariable-regex:
                      metavariable: $SQLCMD
                      regex: (execute|query|executeUpdate)
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: "(HttpServletRequest $REQ)

                  "
              - pattern: "(ServletRequest $REQ)

                  "
          - pattern-not: "$REQ.getUserPrincipal() \n"
          - pattern-not: "$REQ.getSession(...) \n"
          - pattern-not: "$REQ.getAuthType(...) \n"
          - pattern-not: "$REQ.getMethod(...) \n"
          - pattern-not: "$REQ.getLocales(...) \n"
          - pattern-not: "$REQ.getLocale(...) \n"
          - pattern-not: "$REQ.isUserinRole(...) \n"
          - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
          - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
          - pattern-not: "$REQ.getIntHeader(...) \n"
          - pattern-not: "$REQ.getDateHeader(...) \n"
          - pattern-not: "$REQ.authenticate(...) \n"
          - pattern-not: "$REQ.isUserInRole(...) \n"
          - pattern-not: "$REQ.getAttribute(...)

              "
          - pattern-not: "$REQ.getAttributeNames(...)

              "
          - pattern-not: "$REQ.getAuthType(...)

              "
    severity: WARNING
