(executables
 (names Main)
 (libraries
  js_of_ocaml
  integers_stubs_js
  libpcre_stubs_js
  libyaml_stubs_js
  semgrep.running
  tree-sitter.run
  ; semgrep.parsing_languages ; skipped to go from 16MB to 7MB
  )
 (js_of_ocaml
  (javascript_files
   core.js ; misc libraries
   octs.js ; ocaml-tree-sitter plumbing
   )
  ; --no-inline was suggested here:
  ; https://discuss.ocaml.org/t/js-of-ocaml-output-performs-considerably-worse-when-built-with-profile-release-flag/8862/14
  ; but this does not appear to have an effect for us
  ;(flags (:standard --no-inline))
  ; Useful flags to see what is linked in the final JS file
  ; (you can also look at the biggest files under _build/default/.js/)
  ; (link_flags (:standard --debug link))
  )
 (modes js)
 (preprocess
  (pps js_of_ocaml-ppx)))

; we have to massage the libyaml memory offsets
; because the archiecture that ocaml-yaml and ocaml-ctypes
; isn't compatible with wasm32 :(
(rule
 (targets Main.bc.fixed.js)
 (deps fix-libyaml-offsets.py Main.bc.js)
 (action (with-stdout-to %{targets} (run python3 fix-libyaml-offsets.py Main.bc.js)))
)