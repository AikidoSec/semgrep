name: build-test-docker

on:
  workflow_dispatch:
    inputs:
      docker-tags:
        required: true
        type: string
        description: A multi-line string in the format accepted by docker metadata tag action for the tags to apply to the image
      artifact-name:
        required: true
        type: string
        description: Name (key) to use when uploading the docker image tarball as a artifact
      repository-name:
        required: true
        type: string
        description: The repository/name of the docker image to push, e.g., returntocorp/semgrep
        default: returntocorp/semgrep
      file:
        required: true
        type: string
        description: Dockerfile to build
        default: Dockerfile
      enable-tests:
        required: true
        type: boolean
        description: Whether or not to run validation on the built image

  workflow_call:
    inputs:
      docker-tags:
        required: true
        type: string
        description: A multi-line string in the format accepted by docker metadata tag action for the tags to apply to the image
      artifact-name:
        required: true
        type: string
        description: Name (key) to use when uploading the docker image tarball as a artifact
      repository-name:
        required: true
        type: string
        description: The repository/name of the docker image to push, e.g., returntocorp/semgrep
      file:
        required: true
        type: string
        description: Dockerfile to build
      enable-tests:
        required: true
        type: boolean
        description: Whether or not to run validation on the built image

jobs:
  build-test-docker:
    name: Build and test Semgrep Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - id: sanitize-platform
        env:
          PLATFORM: ${{ matrix.platform }}
        run: |
          echo "no-slashes=${PLATFORM//\//-}" >> $GITHUB_OUTPUT
      - uses: docker/setup-buildx-action@v2
      - if: ${{ matrix.platform != 'linux/amd64' }}
        uses: docker/setup-qemu-action@v2
      - id: meta
        name: Set tags and labels
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.repository-name }}
          # :latest is also added automatically
          tags: ${{ inputs.docker-tags }}
      - uses: depot/setup-action@v1
      - name: Build image (amd64)
        id: build-image
        uses: depot/build-push-action@v1.7.1
        with:
          project: fhmxj6w9z8
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=/tmp/image.tar
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.file }}
      - name: Load image
        run: |
          docker load --input /tmp/image.tar
      - uses: actions/checkout@v3
        if: ${{ inputs.enable-tests }}
      - name: Test Image
        if: ${{ inputs.enable-tests }}
        run: ./scripts/validate-docker-build.sh ${{ steps.build-image.outputs.imageid }} ${{ matrix.platform }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}-${{ steps.sanitize-platform.outputs.no-slashes }}
          path: /tmp/image.tar
  merge-images:
    needs: [build-test-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts
      - run: |
          artifact_filenames=(/tmp/artifacts/${{ inputs.artifact-name }}-*/image.tar)
          if [[ ${#artifact_filenames[@]} == 1 ]]; then
            cp ${artifact_filenames[0]} /tmp/image.tar
            exit 0
          fi
          mkdir -p /tmp/merged/blobs/sha256
          echo '{"schemaVersion": 2, "manifests": []}' > /tmp/merged/index.json
          echo '{"imageLayoutVersion":"1.0.0"}' > /tmp/merged/oci-layout
          for filename in ${artifact_filenames[@]}; do
            cd $(dirname $filename)
            tar xf image.tar
            cp -r blobs/sha256/* /tmp/merged/blobs/sha256/
            jq -s '.[0].manifests+=.[1].manifests|.[0]' /tmp/merged/index.json index.json > /tmp/merged/index.tmp
            mv /tmp/merged/index.tmp /tmp/merged/index.json
            echo "current index.json: $(cat index.json | jq)"
            echo "index.json is now: $(cat /tmp/merged/index.json | jq)"
          done
          cd /tmp/merged
          tar cf /tmp/image.tar .
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: /tmp/image.tar
