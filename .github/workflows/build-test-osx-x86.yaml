# This workflow builds and tests the semgrep-core binary for macOS X86
# and generates the osx-wheel for pypi.

# This workflow uses the actions/cache@v3 GHA extension to cache
# the ~/.opam directory, which is different from what we do for our other
# architecture's build processes.
# This workflow runs on GHA-hosted runners and without caching it would run
# very slowly (like 35min instead of 10min with caching). The Linux build process
# uses a special container (returntocorp/ocaml:alpine-xxx) to bring in the
# required dependencies, which makes opam switch create unnecessary and opam
# install almost a noop. The M1 build runs on fast self-hosted runners where
# caching does not seem to be necessary.
# TODO? If this experiment goes well, we might want to use this ~/.opam caching
# technique also for M1 for consistency, and maybe even get rid of our
# returntocorp/ocaml:alpine-xxx container to simplify things.
#
# To update to a new version of OCaml, we can modify the `OPAM_SWITCH_NAME` var
# below, which will update the cache key, and lead to a cache miss on the new builds.
# TODO? we might want to use opam.lock as a key so any update to our dependencies
# would automatically trigger a cache miss and generate a fresh ~/.opam.
#
# alt:
#  - use a self-hosted runner where we can save the content of ~/.opam between
#    runs and do whatever we want. The problem is that the build is then
#    not "hermetic", and we ran in many issues such as the disk of the self-hosted
#    runner being full, or some stuff being left from other CI runs
#    (such as a semgrep install) entering in conflicts with some of our build steps.
#    This also requires some devops work to create and maintain those pools of
#    self-hosted runners.
#  - use a GHA-hosted runner which is nice because we don't have to do
#    anything, and the build are guaranteed to be hermetic. The only problem originally
#    was that it was slower, and for unknown reasons ocamlc was not working well
#    on those macos-12 GHA runners, but caching the ~/.opam with actions/cache@v3
#    seems to solve the speed issue (and maybe ocamlc works now well under macos-12).
#  - use a technique similar to what we do for Linux with our special container, but
#    can this be done for macos?
#
# See also https://www.notion.so/semgrep/Caching-the-Opam-Environment-5d7e594203884d289acdac53713fb39f for more information.

# coupling: if you modify this file, modify also build-test-osx-arm64.yaml
name: build-test-osx-x86

on:
  workflow_dispatch:
    inputs:
      use-cache:
        description: "Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build."
        required: true
        type: boolean
        default: true
  workflow_call:
    inputs:
      use-cache:
        description: "Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build."
        required: false
        type: boolean
        default: true

jobs:
  build-test-osx-x86:
    uses: ./.github/workflows/build-test-osx.yaml
    secrets: inherit
    with:
      architecture: x86
