=== command
SEMGREP_APP_TOKEN="fake_key" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-suppress-errors
=== end of command

=== exit code
1
=== end of exit code

=== stdout - plain
[<Rule id=eqeq-bad>, <Rule id=supply-chain1>]
[]
defaultdict(<class 'list'>, {<Rule id=eqeq-bad>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=4, col=5, offset=37), end=Position(line=4, col=11, offset=43)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=4, col=5, offset=37), end=Position(line=4, col=6, offset=38), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=5, col=5, offset=48), end=Position(line=5, col=11, offset=54)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=5, col=5, offset=48), end=Position(line=5, col=6, offset=49), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=7, col=5, offset=83), end=Position(line=7, col=11, offset=89)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=7, col=5, offset=83), end=Position(line=7, col=6, offset=84), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=3, match_based_index=3, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=11, col=5, offset=120), end=Position(line=11, col=11, offset=126)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=11, col=5, offset=120), end=Position(line=11, col=6, offset=121), abstract_content='y', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False)]})
defaultdict(<class 'list'>, {<Rule id=supply-chain1>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='supply-chain1'), location=Location(path='poetry.lock', start=Position(line=1, col=0, offset=0), end=Position(line=2, col=0, offset=0)), extra=CoreMatchExtra(metavars=Metavars(value={}), engine_kind=EngineKind(value=OSS()), message=None, dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='', is_ignored=False)]})
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {})
                            
                            
┌──────────────────────────┐
│ 4 Blocking Code Findings │
└──────────────────────────┘
           
    foo.py 
       eqeq-bad             
          useless comparison
                            
            4┆ a == a
            ⋮┆----------------------------------------
            5┆ a == a
            ⋮┆----------------------------------------
            7┆ a == a
            ⋮┆----------------------------------------
           11┆ y == y
                                    
                                    
┌──────────────────────────────────┐
│ 1 Reachable Supply Chain Finding │
└──────────────────────────────────┘
                
    poetry.lock 
       supply-chain1        
          found a dependency
                            
            1┆ [[package]]
            2┆ name = "badlib"
                            
  BLOCKING CODE RULES FIRED:
    eqeq-bad


=== end of stdout - plain

=== stderr - plain
                  
                  
┌────────────────┐
│ Debugging Info │
└────────────────┘
                  
  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment git, triggering event is unknown
            
  CONNECTION
  Reporting start of scan for deployment_name         
  Fetching configuration from Semgrep Cloud Platform                 
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 4 files tracked by git with 1 Code rule, 1 Supply Chain rule:
            
            
  CODE RULES
  Scanning 1 file.
                    
  SUPPLY CHAIN RULES
  Scanning 1 file.
foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo
barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

CI scan completed successfully.
  Found 5 findings (4 blocking) from 2 rules.
  Uploading findings.
  View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/org_name/findings
    https://semgrep.dev/orgs/org_name/supply-chain
  Has findings for blocking rules so exiting with code 1

=== end of stderr - plain