=== command
CI="true" GITHUB_ACTIONS="true" GITHUB_EVENT_NAME="pull_request" GITHUB_REPOSITORY="project_name/project_name" GITHUB_RUN_ID="35" GITHUB_ACTOR="some_test_username" GITHUB_REF="some/branch-name" GITHUB_EVENT_PATH="<MASKED>" SEMGREP_APP_TOKEN="fake-key-from-tests" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --debug --no-force-color --no-suppress-errors
=== end of command

=== exit code
2
=== end of exit code

=== stdout - plain

=== end of stdout - plain

=== stderr - plain
Scan environment:
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment github-actions, triggering event is pull_request
  server      - https://semgrep.dev

head branch (bar) has latest commit 17b3114fb3d41437abc2a3e6499db84ad921e6f0, fetching that commit now.
Trying to shallow fetch branch foo from origin
base branch (foo) has latest commit f7ee3123ed098941662685dd8b726fceee48f78d
Fixing git state for github action pull request
Calling git rev-parse HEAD
stashed_rev: 17b3114fb3d41437abc2a3e6499db84ad921e6f0
Not on head ref: 17b3114fb3d41437abc2a3e6499db84ad921e6f0; checking that out now.
Attempting to find merge base, attempt_count=0, fetch_depth=0
Attempting to find merge base, attempt_count=1, fetch_depth=4
Trying to fetch branch foo from origin as base branch
Trying to fetch branch bar as commit from origin as head branch tip commit
Using f7ee3123ed098941662685dd8b726fceee48f78d as the merge-base of f7ee3123ed098941662685dd8b726fceee48f78d and 17b3114fb3d41437abc2a3e6499db84ad921e6f0
Fetching configuration from semgrep.dev
Git root path: <MASKED>/copy
Getting scan configurations
Starting scan
Authenticated as org_name
semgrep version <MASKED>
running 6 rules from 1 config semgrep-app-rules
Initializing git status
Running git diff
Finished git diff. Parsing git status output
['A', 'bar.py']
Git status:
added: [PosixPath('bar.py')]
modified: []
removed: []
renamed: {}
unmerged: []
Initializing dirty paths
Git status output: 
finished getting dirty paths
{}
No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev<MASKED>
Rules:
- eqeq-bad
- eqeq-five
- eqeq-four
- supply-chain1
- supply-chain2
- taint-test
Passing whole rules directly to semgrep_core
Scanning 1 file with 4 python rules.
Running semgrep-core with command:
/<MASKED>/semgrep<MASKED> -json -rules <MASKED>-json_time -fast --debug
--- semgrep-core stderr ---
<MASKED>
<MASKED>
<MASKED>
{
  "rules": [
    {
      "id": "eqeq-bad",
      "languages": [
        "python"
      ],
      "message": "useless comparison",
      "pattern": "$X == $X",
      "severity": "ERROR"
    },
    {
      "fix": "$X == 2",
      "id": "eqeq-five",
      "languages": [
        "python"
      ],
      "message": "useless comparison to 5",
      "metadata": {
        "dev.semgrep.actions": []
      },
      "pattern": "$X == 5",
      "severity": "ERROR"
    },
    {
      "id": "eqeq-four",
      "languages": [
        "python"
      ],
      "message": "useless comparison to 4",
      "metadata": {
        "dev.semgrep.actions": [
          "block"
        ]
      },
      "pattern": "$X == 4",
      "severity": "ERROR"
    },
    {
      "id": "taint-test",
      "languages": [
        "python"
      ],
      "message": "unsafe use of danger",
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern": "sink($X)"
        }
      ],
      "pattern-sources": [
        {
          "pattern": "danger"
        }
      ],
      "severity": "WARNING"
    }
  ]
}
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
<MASKED>
--- end semgrep-core stderr ---
skipped 'bar.py' [rule RuleId(value='taint-test')]: SkipReason(value=IrrelevantRule()): No need to perform deeper matching because target does not contain some elements necessary for the rule to match 'taint-test'
Returning to original head revision 17b3114fb3d41437abc2a3e6499db84ad921e6f0
'ProfilingData' object has no attribute 'set_max_memory_bytes'
Traceback (most recent call last):
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/commands/wrapper.py", line 35, in wrapper
    func(*args, **kwargs)
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/commands/ci.py", line 351, in ci
    ) = semgrep.semgrep_main.main(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/semgrep_main.py", line 424, in main
    ) = run_rules(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/semgrep_main.py", line 170, in run_rules
    ) = core_runner.invoke_semgrep(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/core_runner.py", line 940, in invoke_semgrep
    ) = self._run_rules_direct_to_semgrep_core(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/core_runner.py", line 874, in _run_rules_direct_to_semgrep_core
    profiling_data.set_max_memory_bytes(core_output.time.max_memory_bytes)
AttributeError: 'ProfilingData' object has no attribute 'set_max_memory_bytes'
Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False

=== end of stderr - plain