=== command
CI="true" BITBUCKET_BUILD_NUMBER="hi" SEMGREP_REPO_NAME="a/repo/name" SEMGREP_REPO_URL="https://random.url.org/some/path" SEMGREP_BRANCH="branch/some-other-branch-name" SEMGREP_JOB_URL="https://another.random.url.org/some/path" SEMGREP_COMMIT="<some_random_commit>" SEMGREP_PR_ID="99999" BITBUCKET_REPO_FULL_NAME="project_name/project_name" BITBUCKET_GIT_HTTP_ORIGIN="http://bitbucket.org/project_name/project_name" BITBUCKET_BRANCH="some/branch-name" BITBUCKET_PIPELINE_UUID="a-uuid" BITBUCKET_PR_ID="35" BITBUCKET_COMMIT="<MASKED>" SEMGREP_APP_TOKEN="fake-key-from-tests" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-suppress-errors
=== end of command

=== exit code
1
=== end of exit code

=== stdout - plain
[<Rule id=eqeq-bad>, <Rule id=eqeq-five>, <Rule id=eqeq-four>, <Rule id=taint-test>, <Rule id=supply-chain1>, <Rule id=supply-chain2>]
[]
defaultdict(<class 'list'>, {<Rule id=eqeq-bad>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=4, col=5, offset=37), end=Position(line=4, col=11, offset=43)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=4, col=5, offset=37), end=Position(line=4, col=6, offset=38), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=5, col=5, offset=48), end=Position(line=5, col=11, offset=54)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=5, col=5, offset=48), end=Position(line=5, col=6, offset=49), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=7, col=5, offset=83), end=Position(line=7, col=11, offset=89)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=7, col=5, offset=83), end=Position(line=7, col=6, offset=84), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=3, match_based_index=3, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=11, col=5, offset=120), end=Position(line=11, col=11, offset=126)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=11, col=5, offset=120), end=Position(line=11, col=6, offset=121), abstract_content='y', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False)], <Rule id=eqeq-four>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-four'), location=Location(path='foo.py', start=Position(line=19, col=5, offset=219), end=Position(line=19, col=13, offset=227)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=19, col=5, offset=219), end=Position(line=19, col=8, offset=222), abstract_content='baz', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 4', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == 4', is_ignored=False)], <Rule id=taint-test>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='taint-test'), location=Location(path='foo.py', start=Position(line=27, col=5, offset=357), end=Position(line=27, col=13, offset=365)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=27, col=10, offset=362), end=Position(line=27, col=12, offset=364), abstract_content='d2', propagated_value=SvalueValue(svalue_abstract_content='danger', svalue_start=Position(line=26, col=10, offset=346), svalue_end=Position(line=26, col=16, offset=352)))}), engine_kind=EngineKind(value=OSS()), message='', dataflow_trace=CoreMatchDataflowTrace(taint_source=CoreMatchCallTrace(value=CoreLoc(value=Location(path='foo.py', start=Position(line=26, col=10, offset=346), end=Position(line=26, col=16, offset=352)))), intermediate_vars=[CoreMatchIntermediateVar(location=Location(path='foo.py', start=Position(line=26, col=5, offset=341), end=Position(line=26, col=7, offset=343)))], taint_sink=CoreMatchCallTrace(value=CoreLoc(value=Location(path='foo.py', start=Position(line=27, col=5, offset=357), end=Position(line=27, col=13, offset=365))))), rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.WARNING: 'WARNING'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='danger sink($X)', is_ignored=False)]})
defaultdict(<class 'list'>, {<Rule id=eqeq-five>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-five'), location=Location(path='foo.py', start=Position(line=15, col=5, offset=157), end=Position(line=15, col=11, offset=163)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=15, col=5, offset=157), end=Position(line=15, col=6, offset=158), abstract_content='x', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 5', dataflow_trace=None, rendered_fix='(x == 2)', extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix='(x == 2)', fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == 5', is_ignored=False)], <Rule id=supply-chain1>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='supply-chain1'), location=Location(path='poetry.lock', start=Position(line=1, col=0, offset=0), end=Position(line=2, col=0, offset=0)), extra=CoreMatchExtra(metavars=Metavars(value={}), engine_kind=EngineKind(value=OSS()), message=None, dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='', is_ignored=False)]})
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {})
                            
                            
┌──────────────────────────┐
│ 6 Blocking Code Findings │
└──────────────────────────┘
           
    foo.py 
       eqeq-bad             
          useless comparison
                            
            4┆ a == a
            ⋮┆----------------------------------------
            5┆ a == a
            ⋮┆----------------------------------------
            7┆ a == a
            ⋮┆----------------------------------------
           11┆ y == y
            ⋮┆----------------------------------------
       eqeq-four                 
          useless comparison to 4
                                 
           19┆ baz == 4
            ⋮┆----------------------------------------
       taint-test             
          unsafe use of danger
                              
           27┆ sink(d2)
                                    
                                    
┌──────────────────────────────────┐
│ 1 Reachable Supply Chain Finding │
└──────────────────────────────────┘
                
    poetry.lock 
       supply-chain1        
          found a dependency
                            
            1┆ [[package]]
            2┆ name = "badlib"
                               
                               
┌─────────────────────────────┐
│ 1 Non-blocking Code Finding │
└─────────────────────────────┘
           
    foo.py 
       eqeq-five                 
          useless comparison to 5
                                 
           ▶▶┆ Autofix ▶ (x == 2)
           15┆ (x == 2)
                            
  BLOCKING CODE RULES FIRED:
    eqeq-bad
    eqeq-four
    taint-test


=== end of stdout - plain

=== stderr - plain
                  
                  
┌────────────────┐
│ Debugging Info │
└────────────────┘
                  
  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment bitbucket, triggering event is           
                pull_request                                                    
            
  CONNECTION
  Reporting start of scan for deployment_name         
  Fetching configuration from Semgrep Cloud Platform                 
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 4 files tracked by git with 4 Code rules, 2 Supply Chain rules:
            
            
  CODE RULES
  Scanning 1 file with 4 python rules.
                    
  SUPPLY CHAIN RULES
  Scanning 1 file.
foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo
barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

CI scan completed successfully.
  Found 8 findings (6 blocking) from 6 rules.
  Uploading findings.
  View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/org_name/findings
    https://semgrep.dev/orgs/org_name/supply-chain
  Has findings for blocking rules so exiting with code 1

=== end of stderr - plain