=== command
SEMGREP_APP_TOKEN="fake_key" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-suppress-errors --gitlab-sast
=== end of command

=== exit code
2
=== end of exit code

=== stdout - plain

=== end of stdout - plain

=== stderr - plain


┌────────────────┐
│ Debugging Info │
└────────────────┘

  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment git, triggering event is unknown

  CONNECTION
  Reporting start of scan for deployment_name (scan_id=<MagicMock name='post()…
  Fetching configuration from Semgrep Cloud Platform
  Enabled products: Code, Supply Chain

┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 4 files tracked by git with 4 Code rules, 3 Supply Chain rules:


  CODE RULES
  Scanning 1 file with 4 python rules.

  SUPPLY CHAIN RULES
  Scanning 1 file.
badly formed hexadecimal UUID string
Traceback (most recent call last):
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/commands/wrapper.py", line 35, in wrapper
    func(*args, **kwargs)
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/commands/ci.py", line 539, in ci
    output_handler.output(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/output.py", line 345, in output
    output = self._build_output()
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/output.py", line 483, in _build_output
    return self.formatter.output(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/formatter/base.py", line 29, in output
    return self.format(
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/formatter/gitlab_sast.py", line 169, in format
    "vulnerabilities": [
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/formatter/gitlab_sast.py", line 170, in <listcomp>
    self._format_rule_match(rule_match)
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/formatter/gitlab_sast.py", line 42, in _format_rule_match
    "id": str(rule_match.uuid),  # create UUID from sha256 hash
  File "/home/runner/work/semgrep/semgrep/cli/src/semgrep/rule_match.py", line 445, in uuid
    return UUID(hex=self.syntactic_id)
  File "/usr/lib/python3.10/uuid.py", line 177, in __init__
    raise ValueError('badly formed hexadecimal UUID string')
ValueError: badly formed hexadecimal UUID string

=== end of stderr - plain