=== command
SEMGREP_APP_TOKEN="fake_key" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-suppress-errors --gitlab-secrets
=== end of command

=== exit code
1
=== end of exit code

=== stdout - plain
[<Rule id=eqeq-bad>, <Rule id=eqeq-five>, <Rule id=eqeq-four>, <Rule id=taint-test>, <Rule id=supply-chain1>, <Rule id=supply-chain2>]
[]
defaultdict(<class 'list'>, {<Rule id=eqeq-bad>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=4, col=5, offset=37), end=Position(line=4, col=11, offset=43)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=4, col=5, offset=37), end=Position(line=4, col=6, offset=38), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=5, col=5, offset=48), end=Position(line=5, col=11, offset=54)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=5, col=5, offset=48), end=Position(line=5, col=6, offset=49), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=7, col=5, offset=83), end=Position(line=7, col=11, offset=89)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=7, col=5, offset=83), end=Position(line=7, col=6, offset=84), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=3, match_based_index=3, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=11, col=5, offset=120), end=Position(line=11, col=11, offset=126)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=11, col=5, offset=120), end=Position(line=11, col=6, offset=121), abstract_content='y', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False)], <Rule id=eqeq-four>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-four'), location=Location(path='foo.py', start=Position(line=19, col=5, offset=219), end=Position(line=19, col=13, offset=227)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=19, col=5, offset=219), end=Position(line=19, col=8, offset=222), abstract_content='baz', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 4', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == 4', is_ignored=False)], <Rule id=taint-test>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='taint-test'), location=Location(path='foo.py', start=Position(line=27, col=5, offset=357), end=Position(line=27, col=13, offset=365)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=27, col=10, offset=362), end=Position(line=27, col=12, offset=364), abstract_content='d2', propagated_value=SvalueValue(svalue_abstract_content='danger', svalue_start=Position(line=26, col=10, offset=346), svalue_end=Position(line=26, col=16, offset=352)))}), engine_kind=EngineKind(value=OSS()), message='', dataflow_trace=CoreMatchDataflowTrace(taint_source=CoreMatchCallTrace(value=CoreLoc(value=Location(path='foo.py', start=Position(line=26, col=10, offset=346), end=Position(line=26, col=16, offset=352)))), intermediate_vars=[CoreMatchIntermediateVar(location=Location(path='foo.py', start=Position(line=26, col=5, offset=341), end=Position(line=26, col=7, offset=343)))], taint_sink=CoreMatchCallTrace(value=CoreLoc(value=Location(path='foo.py', start=Position(line=27, col=5, offset=357), end=Position(line=27, col=13, offset=365))))), rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.WARNING: 'WARNING'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='danger sink($X)', is_ignored=False)]})
defaultdict(<class 'list'>, {<Rule id=eqeq-five>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-five'), location=Location(path='foo.py', start=Position(line=15, col=5, offset=157), end=Position(line=15, col=11, offset=163)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=15, col=5, offset=157), end=Position(line=15, col=6, offset=158), abstract_content='x', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 5', dataflow_trace=None, rendered_fix='(x == 2)', extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix='(x == 2)', fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == 5', is_ignored=False)], <Rule id=supply-chain1>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='supply-chain1'), location=Location(path='poetry.lock', start=Position(line=1, col=0, offset=0), end=Position(line=2, col=0, offset=0)), extra=CoreMatchExtra(metavars=Metavars(value={}), engine_kind=EngineKind(value=OSS()), message=None, dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='', is_ignored=False)]})
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {})
{
  "$schema": "https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json",
  "scan": {
    "analyzer": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://semgrep.dev",
      "vendor": {
        "name": "Semgrep"
      },
      "version": "<MASKED>"
    },
    "end_time": "<MASKED>",
    "scanner": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://semgrep.dev",
      "vendor": {
        "name": "Semgrep"
      },
      "version": "<MASKED>"
    },
    "start_time": "<MASKED>",
    "status": "success",
    "type": "sast",
    "version": "<MASKED>"
  },
  "version": "15.0.4",
  "vulnerabilities": [
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:eqeq-bad",
      "details": {},
      "flags": [],
      "id": "8c695a6a-4ab5-ffff-33d0-103309a310c1",
      "identifiers": [
        {
          "name": "Semgrep - eqeq-bad",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/eqeq-bad",
          "value": "eqeq-bad"
        }
      ],
      "location": {
        "end_line": 4,
        "file": "foo.py",
        "start_line": 4
      },
      "message": "useless comparison",
      "raw_source_code_extract": [
        "    a == a\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:eqeq-bad",
      "details": {},
      "flags": [],
      "id": "8abb389b-2f01-d0e5-2d66-3251e1d24ba7",
      "identifiers": [
        {
          "name": "Semgrep - eqeq-bad",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/eqeq-bad",
          "value": "eqeq-bad"
        }
      ],
      "location": {
        "end_line": 5,
        "file": "foo.py",
        "start_line": 5
      },
      "message": "useless comparison",
      "raw_source_code_extract": [
        "    a == a\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:eqeq-bad",
      "details": {},
      "flags": [],
      "id": "f6c666e6-921a-4402-8a20-15d0de15cc14",
      "identifiers": [
        {
          "name": "Semgrep - eqeq-bad",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/eqeq-bad",
          "value": "eqeq-bad"
        }
      ],
      "location": {
        "end_line": 7,
        "file": "foo.py",
        "start_line": 7
      },
      "message": "useless comparison",
      "raw_source_code_extract": [
        "    a == a\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:eqeq-bad",
      "details": {},
      "flags": [],
      "id": "d4404942-1636-e370-e790-6a6bed5fce54",
      "identifiers": [
        {
          "name": "Semgrep - eqeq-bad",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/eqeq-bad",
          "value": "eqeq-bad"
        }
      ],
      "location": {
        "end_line": 11,
        "file": "foo.py",
        "start_line": 11
      },
      "message": "useless comparison",
      "raw_source_code_extract": [
        "    y == y\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:eqeq-four",
      "details": {},
      "flags": [],
      "id": "87cd1247-dfc8-4bbd-502c-872035c71a63",
      "identifiers": [
        {
          "name": "Semgrep - eqeq-four",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/eqeq-four",
          "value": "eqeq-four"
        }
      ],
      "location": {
        "end_line": 19,
        "file": "foo.py",
        "start_line": 19
      },
      "message": "useless comparison to 4",
      "raw_source_code_extract": [
        "    baz == 4\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:taint-test",
      "details": {},
      "flags": [],
      "id": "05a6d679-3a62-42a4-9ff8-3113ef4a83b3",
      "identifiers": [
        {
          "name": "Semgrep - taint-test",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/taint-test",
          "value": "taint-test"
        }
      ],
      "location": {
        "end_line": 27,
        "file": "foo.py",
        "start_line": 27
      },
      "message": "unsafe use of danger",
      "raw_source_code_extract": [
        "    sink(d2)\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "Medium"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "foo.py:b08fd7a517303ab07cfa211f74d03c1a4c2e64b3b0656d84ff32ecb449b785d2:eqeq-five",
      "details": {},
      "flags": [],
      "id": "8646a2df-c020-9136-0696-9dcfe84e53c0",
      "identifiers": [
        {
          "name": "Semgrep - eqeq-five",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/eqeq-five",
          "value": "eqeq-five"
        }
      ],
      "location": {
        "end_line": 15,
        "file": "foo.py",
        "start_line": 15
      },
      "message": "useless comparison to 5",
      "raw_source_code_extract": [
        "    x == 5\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    },
    {
      "category": "secret_detection",
      "commit": {
        "date": "<MASKED>Z",
        "sha": "0000000"
      },
      "cve": "poetry.lock:f53a023eedfa3fbf2925ec7dc76eecdc954ea94b7e47065393dbad519613dc89:supply-chain1",
      "details": {
        "exposure": {
          "name": "exposure",
          "type": "text",
          "value": "reachable"
        }
      },
      "flags": [],
      "id": "6090c1ba-b6c8-853d-a43c-7119a6eb2ad0",
      "identifiers": [
        {
          "name": "Semgrep - supply-chain1",
          "type": "semgrep_type",
          "url": "https://semgrep.dev/r/supply-chain1",
          "value": "supply-chain1"
        }
      ],
      "location": {
        "end_line": 2,
        "file": "poetry.lock",
        "start_line": 1
      },
      "message": "found a dependency",
      "raw_source_code_extract": [
        "[[package]]\n",
        "name = \"badlib\"\n"
      ],
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep",
        "vendor": {
          "name": "Semgrep"
        }
      },
      "severity": "High"
    }
  ]
}

=== end of stdout - plain

=== stderr - plain
                  
                  
┌────────────────┐
│ Debugging Info │
└────────────────┘
                  
  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment git, triggering event is unknown
            
  CONNECTION
  Reporting start of scan for deployment_name         
  Fetching configuration from Semgrep Cloud Platform                 
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 4 files tracked by git with 4 Code rules, 2 Supply Chain rules:
            
            
  CODE RULES
  Scanning 1 file with 4 python rules.
                    
  SUPPLY CHAIN RULES
  Scanning 1 file.
foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo
barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

CI scan completed successfully.
  Found 8 findings (6 blocking) from 6 rules.
  Uploading findings.
  View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/org_name/findings
    https://semgrep.dev/orgs/org_name/supply-chain
  Has findings for blocking rules so exiting with code 1

=== end of stderr - plain