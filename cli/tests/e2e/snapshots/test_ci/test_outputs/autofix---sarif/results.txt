=== command
SEMGREP_APP_TOKEN="fake_key" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-suppress-errors --sarif
=== end of command

=== exit code
1
=== end of exit code

=== stdout - plain
[<Rule id=eqeq-bad>, <Rule id=eqeq-five>, <Rule id=eqeq-four>, <Rule id=taint-test>, <Rule id=supply-chain1>, <Rule id=supply-chain2>]
[]
defaultdict(<class 'list'>, {<Rule id=eqeq-bad>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=4, col=5, offset=37), end=Position(line=4, col=11, offset=43)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=4, col=5, offset=37), end=Position(line=4, col=6, offset=38), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=5, col=5, offset=48), end=Position(line=5, col=11, offset=54)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=5, col=5, offset=48), end=Position(line=5, col=6, offset=49), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=6, col=5, offset=59), end=Position(line=6, col=11, offset=65)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=6, col=5, offset=59), end=Position(line=6, col=6, offset=60), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=2, match_based_index=2, match_formula_string='$X == $X', is_ignored=True), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=7, col=5, offset=83), end=Position(line=7, col=11, offset=89)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=7, col=5, offset=83), end=Position(line=7, col=6, offset=84), abstract_content='a', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=3, match_based_index=3, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=9, col=5, offset=95), end=Position(line=9, col=11, offset=101)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=9, col=5, offset=95), end=Position(line=9, col=6, offset=96), abstract_content='x', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=True), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=11, col=5, offset=120), end=Position(line=11, col=11, offset=126)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=11, col=5, offset=120), end=Position(line=11, col=6, offset=121), abstract_content='y', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-bad'), location=Location(path='foo.py', start=Position(line=13, col=5, offset=132), end=Position(line=13, col=11, offset=138)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=13, col=5, offset=132), end=Position(line=13, col=6, offset=133), abstract_content='z', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == $X', is_ignored=True)], <Rule id=eqeq-four>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-four'), location=Location(path='foo.py', start=Position(line=18, col=5, offset=193), end=Position(line=18, col=13, offset=201)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=18, col=5, offset=193), end=Position(line=18, col=8, offset=196), abstract_content='baz', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 4', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == 4', is_ignored=True), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-four'), location=Location(path='foo.py', start=Position(line=19, col=5, offset=219), end=Position(line=19, col=13, offset=227)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=19, col=5, offset=219), end=Position(line=19, col=8, offset=222), abstract_content='baz', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 4', dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == 4', is_ignored=False)], <Rule id=taint-test>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='taint-test'), location=Location(path='foo.py', start=Position(line=27, col=5, offset=357), end=Position(line=27, col=13, offset=365)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=27, col=10, offset=362), end=Position(line=27, col=12, offset=364), abstract_content='d2', propagated_value=SvalueValue(svalue_abstract_content='danger', svalue_start=Position(line=26, col=10, offset=346), svalue_end=Position(line=26, col=16, offset=352)))}), engine_kind=EngineKind(value=OSS()), message='', dataflow_trace=CoreMatchDataflowTrace(taint_source=CoreMatchCallTrace(value=CoreLoc(value=Location(path='foo.py', start=Position(line=26, col=10, offset=346), end=Position(line=26, col=16, offset=352)))), intermediate_vars=[CoreMatchIntermediateVar(location=Location(path='foo.py', start=Position(line=26, col=5, offset=341), end=Position(line=26, col=7, offset=343)))], taint_sink=CoreMatchCallTrace(value=CoreLoc(value=Location(path='foo.py', start=Position(line=27, col=5, offset=357), end=Position(line=27, col=13, offset=365))))), rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.WARNING: 'WARNING'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='danger sink($X)', is_ignored=False)]})
defaultdict(<class 'list'>, {<Rule id=eqeq-five>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-five'), location=Location(path='foo.py', start=Position(line=15, col=5, offset=157), end=Position(line=15, col=11, offset=163)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=15, col=5, offset=157), end=Position(line=15, col=6, offset=158), abstract_content='x', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 5', dataflow_trace=None, rendered_fix='(x == 2)', extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix='(x == 2)', fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == 5', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-five'), location=Location(path='foo.py', start=Position(line=16, col=5, offset=168), end=Position(line=16, col=11, offset=174)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=16, col=5, offset=168), end=Position(line=16, col=6, offset=169), abstract_content='y', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 5', dataflow_trace=None, rendered_fix='(y == 2)', extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix='(y == 2)', fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == 5', is_ignored=True)], <Rule id=supply-chain1>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='supply-chain1'), location=Location(path='poetry.lock', start=Position(line=1, col=0, offset=0), end=Position(line=2, col=0, offset=0)), extra=CoreMatchExtra(metavars=Metavars(value={}), engine_kind=EngineKind(value=OSS()), message=None, dataflow_trace=None, rendered_fix=None, extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix=None, fix_regex=None, index=0, match_based_index=0, match_formula_string='', is_ignored=False)]})
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {})
{
  "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json",
  "runs": [
    {
      "invocations": [
        {
          "executionSuccessful": true,
          "toolExecutionNotifications": []
        }
      ],
      "results": [
        {
          "fingerprints": {
            "matchBasedId/v1": "0357b19d63972f62544383b820b32bdcbeda622708aa4a5b798b8cac7290deacdbb32468495f0b29732cfcaa0ff9fe9ec3ca672f4fcc67f987cd889ac08b1c6a_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 4,
                  "snippet": {
                    "text": "    a == a"
                  },
                  "startColumn": 5,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "0357b19d63972f62544383b820b32bdcbeda622708aa4a5b798b8cac7290deacdbb32468495f0b29732cfcaa0ff9fe9ec3ca672f4fcc67f987cd889ac08b1c6a_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 5,
                  "snippet": {
                    "text": "    a == a"
                  },
                  "startColumn": 5,
                  "startLine": 5
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "0357b19d63972f62544383b820b32bdcbeda622708aa4a5b798b8cac7290deacdbb32468495f0b29732cfcaa0ff9fe9ec3ca672f4fcc67f987cd889ac08b1c6a_2"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 6,
                  "snippet": {
                    "text": "    a == a  # nosemgrep"
                  },
                  "startColumn": 5,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad",
          "suppressions": [
            {
              "kind": "inSource"
            }
          ]
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "0357b19d63972f62544383b820b32bdcbeda622708aa4a5b798b8cac7290deacdbb32468495f0b29732cfcaa0ff9fe9ec3ca672f4fcc67f987cd889ac08b1c6a_3"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 7,
                  "snippet": {
                    "text": "    a == a"
                  },
                  "startColumn": 5,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "83fb2cbc6be00fffc142621a1b10702bdd228f97c42ca16ba5f902ec393231e1424bed8472cec7c9213190cb1f576e5a495b3aba5cef09ac2791715d3bf9e983_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 9,
                  "snippet": {
                    "text": "    x == x  # nosemgrep"
                  },
                  "startColumn": 5,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad",
          "suppressions": [
            {
              "kind": "inSource"
            }
          ]
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "5efd0945774f190445f7cf2b0b85568a845cc46dddc11e029205b882436dccf78e12a752408c13dfe97b572f8bc795099ca0bddb89b3040afcaf6a6d8c17b570_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 11,
                  "snippet": {
                    "text": "    y == y"
                  },
                  "startColumn": 5,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f33d61e2c4592fb3a295213cb9d829c7d314041cef354f9b4199bf18526d72df596c0ef4c8e56289511e1ea8e2183752f403fd922f382d090846c456744367d2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 13,
                  "snippet": {
                    "text": "    z == z  # nosemgrep"
                  },
                  "startColumn": 5,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison"
          },
          "properties": {},
          "ruleId": "eqeq-bad",
          "suppressions": [
            {
              "kind": "inSource"
            }
          ]
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "e7f900087df67093981e7d10847997734cfe6e3f1bcca3e05b81ff799e15d217834c0ae1d8114b52bef34242153efcbd3708167ca823100cdca2a843046972b8_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 13,
                  "endLine": 18,
                  "snippet": {
                    "text": "    baz == 4  # nosemgrep"
                  },
                  "startColumn": 5,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison to 4"
          },
          "properties": {},
          "ruleId": "eqeq-four",
          "suppressions": [
            {
              "kind": "inSource"
            }
          ]
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "e7f900087df67093981e7d10847997734cfe6e3f1bcca3e05b81ff799e15d217834c0ae1d8114b52bef34242153efcbd3708167ca823100cdca2a843046972b8_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 13,
                  "endLine": 19,
                  "snippet": {
                    "text": "    baz == 4"
                  },
                  "startColumn": 5,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison to 4"
          },
          "properties": {},
          "ruleId": "eqeq-four"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "e160d5d9982bc004e18272a890af8fc2539063a06782d2f509b2c2d9b7e58c5b095443b568847f7c9ab25f68f9b5c7a1dea764e514d0480bab7b12dca08f4a57_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 13,
                  "endLine": 27,
                  "snippet": {
                    "text": "    sink(d2)"
                  },
                  "startColumn": 5,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "unsafe use of danger"
          },
          "properties": {},
          "ruleId": "taint-test"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "186b96f64aca90b7f5a9c75f2e44538885d0e727ed3161ef7b6d46c40b3d078acfc8859b290e118cb8ca42f5b41e61afe73b0f416f47a2f16abce67b1be307d3_0"
          },
          "fixes": [
            {
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "foo.py"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "endColumn": 11,
                        "endLine": 15,
                        "startColumn": 5,
                        "startLine": 15
                      },
                      "insertedContent": {
                        "text": "    (x == 2)"
                      }
                    }
                  ]
                }
              ],
              "description": {
                "text": "useless comparison to 5\n Autofix: Semgrep rule suggested fix"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 15,
                  "snippet": {
                    "text": "    x == 5"
                  },
                  "startColumn": 5,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison to 5"
          },
          "properties": {},
          "ruleId": "eqeq-five"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "d2d0825f113f2fee5f7cbd5fb160772b3f3ab5043120b912101f2f20d4a0cce42df32b8e89f889f945daa1b216f9755eb958b9cb73c4c4ddf2ef5ecd0b4d1ad3_0"
          },
          "fixes": [
            {
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "foo.py"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "endColumn": 11,
                        "endLine": 16,
                        "startColumn": 5,
                        "startLine": 16
                      },
                      "insertedContent": {
                        "text": "    (y == 2)  # nosemgrep"
                      }
                    }
                  ]
                }
              ],
              "description": {
                "text": "useless comparison to 5\n Autofix: Semgrep rule suggested fix"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "foo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 11,
                  "endLine": 16,
                  "snippet": {
                    "text": "    y == 5  # nosemgrep"
                  },
                  "startColumn": 5,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "useless comparison to 5"
          },
          "properties": {},
          "ruleId": "eqeq-five",
          "suppressions": [
            {
              "kind": "inSource"
            }
          ]
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2c4ff12fcdf80ef1c00dd0f566ae102d792c7ba68e560d70f111aae3b3216c0b1b943e74d2ce29c0361f1fbc37bd4e9aafd32c3435a36c61b8bd3963efe0d7a1_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "poetry.lock",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 0,
                  "endLine": 2,
                  "snippet": {
                    "text": "[[package]]\nname = \"badlib\""
                  },
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "found a dependency"
          },
          "properties": {
            "exposure": "reachable"
          },
          "ruleId": "supply-chain1"
        }
      ],
      "tool": {
        "driver": {
          "name": "semgrep",
          "rules": [
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "found a dependency"
              },
              "id": "supply-chain1",
              "name": "supply-chain1",
              "properties": {
                "precision": "very-high",
                "tags": []
              },
              "shortDescription": {
                "text": "found a dependency"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "unsafe use of danger"
              },
              "id": "taint-test",
              "name": "taint-test",
              "properties": {
                "precision": "very-high",
                "tags": []
              },
              "shortDescription": {
                "text": "unsafe use of danger"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "useless comparison to 5"
              },
              "id": "eqeq-five",
              "name": "eqeq-five",
              "properties": {
                "precision": "very-high",
                "tags": []
              },
              "shortDescription": {
                "text": "useless comparison to 5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "useless comparison"
              },
              "id": "eqeq-bad",
              "name": "eqeq-bad",
              "properties": {
                "precision": "very-high",
                "tags": []
              },
              "shortDescription": {
                "text": "useless comparison"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "useless comparison to 4"
              },
              "id": "eqeq-four",
              "name": "eqeq-four",
              "properties": {
                "precision": "very-high",
                "tags": []
              },
              "shortDescription": {
                "text": "useless comparison to 4"
              }
            }
          ],
          "semanticVersion": "<MASKED>"
        }
      }
    }
  ],
  "version": "2.1.0"
}

=== end of stdout - plain

=== stderr - plain
                  
                  
┌────────────────┐
│ Debugging Info │
└────────────────┘
                  
  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment git, triggering event is unknown
            
  CONNECTION
  Reporting start of scan for deployment_name         
  Fetching configuration from Semgrep Cloud Platform                 
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 4 files tracked by git with 4 Code rules, 2 Supply Chain rules:
            
            
  CODE RULES
  Scanning 1 file with 4 python rules.
                    
  SUPPLY CHAIN RULES
  Scanning 1 file.
foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo
barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

CI scan completed successfully.
  Found 13 findings (10 blocking) from 6 rules.
  Uploading findings.
  View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/org_name/findings
    https://semgrep.dev/orgs/org_name/supply-chain
  Has findings for blocking rules so exiting with code 1

=== end of stderr - plain