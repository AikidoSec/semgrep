=== command
SEMGREP_APP_TOKEN="fake-key-from-tests" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --dry-run --no-suppress-errors
=== end of command

=== exit code
1
=== end of exit code

=== stdout - plain

Semgrep Supply Chain Summary: 0 Reachable findings, 1 Unreachable finding


Unreachable Supply Chain Findings:

  poetry.lock 
     supply-chain1
        found a dependency


First-Party Non-Blocking Findings:

  foo.py 
     eqeq-five
        useless comparison to 5

         ▶▶┆ Autofix ▶ (x == 2)
         15┆ x == 5

First-Party Blocking Findings:

  foo.py 
     eqeq-bad
        useless comparison

          4┆ a == a
          ⋮┆----------------------------------------
          5┆ a == a
          ⋮┆----------------------------------------
          7┆ a == a
          ⋮┆----------------------------------------
         11┆ y == y
          ⋮┆----------------------------------------
         23┆ b == b # Triage ignored by syntactic_id
          ⋮┆----------------------------------------
     eqeq-four
        useless comparison to 4

         19┆ baz == 4
          ⋮┆----------------------------------------
     taint-test
        unsafe use of danger

         27┆ sink(d2)

First-Party Blocking Rules Fired:
   eqeq-bad   
   eqeq-four   
   taint-test

=== end of stdout - plain

=== stderr - plain
Scan environment:
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment git, triggering event is unknown
  server      - https://semgrep.dev

Fetching configuration from semgrep.dev
Would have sent POST request to create scan
Authenticated as org_name
Scanning 1 file with 4 python rules.

Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

CI scan completed successfully.
  Found 9 findings (7 blocking) from 6 rules.
  Uploading findings to Semgrep App.
Would have sent findings and ignores blob: {
    "token": null,
    "gitlab_token": null,
    "findings": [
        {
            "check_id": "taint-test",
            "path": "foo.py",
            "line": 27,
            "column": 5,
            "end_line": 27,
            "end_column": 13,
            "message": "unsafe use of danger",
            "severity": 1,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "05a6d6793a6242a49ff83113ef4a83b3",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "dd9169c466c1354888cf8ba4804ed68fddcf9b7a2a03bec53cab14c419ef4eb06504c61508f7c25b258a5b8bea2953536b608c2b2ad2faf6888367593b7a43dc_0",
            "dataflow_trace": {
                "taint_source": [
                    "CliLoc",
                    [
                        {
                            "path": "foo.py",
                            "start": {
                                "line": 26,
                                "col": 10,
                                "offset": 346
                            },
                            "end": {
                                "line": 26,
                                "col": 16,
                                "offset": 352
                            }
                        },
                        "danger"
                    ]
                ],
                "intermediate_vars": [
                    {
                        "location": {
                            "path": "foo.py",
                            "start": {
                                "line": 26,
                                "col": 5,
                                "offset": 341
                            },
                            "end": {
                                "line": 26,
                                "col": 7,
                                "offset": 343
                            }
                        },
                        "content": "d2"
                    }
                ],
                "taint_sink": [
                    "CliLoc",
                    [
                        {
                            "path": "foo.py",
                            "start": {
                                "line": 27,
                                "col": 5,
                                "offset": 357
                            },
                            "end": {
                                "line": 27,
                                "col": 13,
                                "offset": 365
                            }
                        },
                        "sink(d2)"
                    ]
                ]
            }
        },
        {
            "check_id": "supply-chain1",
            "path": "poetry.lock",
            "line": 0,
            "column": 0,
            "end_line": 0,
            "end_column": 0,
            "message": "found a dependency",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "ff8806e5d262f88aeebbc15b80d84f12",
            "metadata": {
                "dev.semgrep.actions": [
                    "block"
                ],
                "sca-kind": "upgrade-only"
            },
            "is_blocking": false,
            "match_based_id": "2c4ff12fcdf80ef1c00dd0f566ae102d792c7ba68e560d70f111aae3b3216c0b1b943e74d2ce29c0361f1fbc37bd4e9aafd32c3435a36c61b8bd3963efe0d7a1_0",
            "sca_info": {
                "reachable": false,
                "reachability_rule": false,
                "sca_finding_schema": 20220913,
                "dependency_match": {
                    "dependency_pattern": {
                        "ecosystem": "pypi",
                        "package": "badlib",
                        "semver_range": "== 99.99.99"
                    },
                    "found_dependency": {
                        "package": "badlib",
                        "version": "99.99.99",
                        "ecosystem": "pypi",
                        "allowed_hashes": {},
                        "transitivity": "unknown",
                        "line_number": 1
                    },
                    "lockfile": "poetry.lock"
                }
            }
        },
        {
            "check_id": "eqeq-four",
            "path": "foo.py",
            "line": 19,
            "column": 5,
            "end_line": 19,
            "end_column": 13,
            "message": "useless comparison to 4",
            "severity": 2,
            "index": 1,
            "commit_date": <MASKED>
            "syntactic_id": "87cd1247dfc84bbd502c872035c71a63",
            "metadata": {
                "dev.semgrep.actions": [
                    "block"
                ]
            },
            "is_blocking": true,
            "match_based_id": "84efea6528e33f046c2657872c5bf6be1c49626649c3dfba6f6858e6150b4c7d343d7076b17557ef7a3c332fac2ec9e9dbdafab37c6a2c8273dfe087a6fb9e75_1"
        },
        {
            "check_id": "eqeq-five",
            "path": "foo.py",
            "line": 15,
            "column": 5,
            "end_line": 15,
            "end_column": 11,
            "message": "useless comparison to 5",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "8646a2dfc020913606969dcfe84e53c0",
            "metadata": {
                "dev.semgrep.actions": []
            },
            "is_blocking": false,
            "match_based_id": "3aef708549288c42becf8d3650168985ffa6605b8fcdfc315493e22b7c0dd59302dda449e6d7c391f050288a0b77ecb66274307e86e106ceb1aebdcdfd915d61_0"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 24,
            "column": 5,
            "end_line": 24,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "f3b21c38bc22a1f1f870d49fc3a40244",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_8"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 23,
            "column": 5,
            "end_line": 23,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "a557d3b401636ba873e590c81b693a8f",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_7"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 11,
            "column": 5,
            "end_line": 11,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "d44049421636e370e7906a6bed5fce54",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_5"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 7,
            "column": 5,
            "end_line": 7,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 3,
            "commit_date": <MASKED>
            "syntactic_id": "f6c666e6921a44028a2015d0de15cc14",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_3"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 5,
            "column": 5,
            "end_line": 5,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 1,
            "commit_date": <MASKED>
            "syntactic_id": "8abb389b2f01d0e52d663251e1d24ba7",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_1"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 4,
            "column": 5,
            "end_line": 4,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "8c695a6a4ab5ffff33d0103309a310c1",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_0"
        }
    ],
    "searched_paths": [
        "foo.py"
    ],
    "renamed_paths": [],
    "rule_ids": [
        "eqeq-bad",
        "eqeq-five",
        "eqeq-four",
        "taint-test",
        "supply-chain1",
        "supply-chain2"
    ],
    "cai_ids": [],
    "ignores": [
        {
            "check_id": "eqeq-four",
            "path": "foo.py",
            "line": 18,
            "column": 5,
            "end_line": 18,
            "end_column": 13,
            "message": "useless comparison to 4",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "0c6353c9e29a6595b15fe4f554cd4134",
            "metadata": {
                "dev.semgrep.actions": [
                    "block"
                ]
            },
            "is_blocking": true,
            "match_based_id": "84efea6528e33f046c2657872c5bf6be1c49626649c3dfba6f6858e6150b4c7d343d7076b17557ef7a3c332fac2ec9e9dbdafab37c6a2c8273dfe087a6fb9e75_0"
        },
        {
            "check_id": "eqeq-five",
            "path": "foo.py",
            "line": 16,
            "column": 5,
            "end_line": 16,
            "end_column": 11,
            "message": "useless comparison to 5",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "6ed37cfa23475cee444f54947efb9da4",
            "metadata": {
                "dev.semgrep.actions": []
            },
            "is_blocking": false,
            "match_based_id": "3aef708549288c42becf8d3650168985ffa6605b8fcdfc315493e22b7c0dd59302dda449e6d7c391f050288a0b77ecb66274307e86e106ceb1aebdcdfd915d61_1"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 13,
            "column": 5,
            "end_line": 13,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "0db994486d207a88b9e7bc0475d8a14a",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_6"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 9,
            "column": 5,
            "end_line": 9,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 0,
            "commit_date": <MASKED>
            "syntactic_id": "bf0f44ff9d49cd5ca3771b3ee6d2fcfc",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_4"
        },
        {
            "check_id": "eqeq-bad",
            "path": "foo.py",
            "line": 6,
            "column": 5,
            "end_line": 6,
            "end_column": 11,
            "message": "useless comparison",
            "severity": 2,
            "index": 2,
            "commit_date": <MASKED>
            "syntactic_id": "c2d65932166aec2a4a96ff0e8deebd97",
            "metadata": {},
            "is_blocking": true,
            "match_based_id": "43da9a2fa8a5df82cfe82c79bec988cd6d5cbf616c9afb7c4d666a25f972ab5929c15db2768bd1b4412c248ba5f472db947ad00219c8a8e923c7e3c5fb014baa_2"
        }
    ]
}
Would have sent complete blob: {
    "exit_code": 1,
    "stats": {
        "findings": 10,
        "errors": [],
        "total_time": <MASKED>
        "unsupported_exts": {
            ".txt": 1
        },
        "lockfile_scan_info": {
            "poetry.lock": 1,
            "yarn.lock": 1
        },
        "parse_rate": {
            "python": {
                "targets_parsed": 1,
                "num_targets": 1,
                "bytes_parsed": 366,
                "num_bytes": 366
            }
        }
    }
}
  Has findings for blocking rules so exiting with code 1

=== end of stderr - plain