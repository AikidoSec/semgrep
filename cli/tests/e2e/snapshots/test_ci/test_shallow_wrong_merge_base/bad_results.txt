=== command
CI="true" GITHUB_ACTIONS="true" GITHUB_EVENT_NAME="pull_request" GITHUB_REPOSITORY="project_name/project_name" GITHUB_RUN_ID="35" GITHUB_ACTOR="some_test_username" GITHUB_REF="some/branch-name" GITHUB_EVENT_PATH="<MASKED>" SEMGREP_APP_TOKEN="fake-key-from-tests" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-force-color --no-suppress-errors
=== end of command

=== exit code
0
=== end of exit code

=== stdout - plain
                  
                  
┌────────────────┐
│ Debugging Info │
└────────────────┘
                  
  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment github-actions, triggering event is      
                pull_request                                                    
Fixing git state for github action pull request
Not on head ref: 7b5cda417c780f1f96c888e1d7bd062f46df236e; checking that out now.
            
  CONNECTION
Using b903231925961ac9d787ae53ee0bd15ec156e689 as the merge-base of 81af3f0c528f4206d48f2f1d1a0ada5fa9e01f38 and 7b5cda417c780f1f96c888e1d7bd062f46df236e
  Reporting start of scan for deployment_name         
  Fetching configuration from Semgrep Cloud Platform                 
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 2 files tracked by git with 4 Code rules:
  Scanning 2 files with 4 python rules.
  Current version has 3 findings.

Switching repository to baseline commit 'b903231925961ac9d787ae53ee0bd15ec156e689'.
  Will report findings introduced by these commits (may be incomplete for shallow checkouts):
    * 7b5cda4 commit #4
    * 5b37988 commit #3

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 1 Code rule:
  Scanning 1 file.
foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo
[<Rule id=eqeq-bad>, <Rule id=eqeq-five>, <Rule id=eqeq-four>, <Rule id=taint-test>, <Rule id=supply-chain1>, <Rule id=supply-chain2>]
[]
barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {<Rule id=eqeq-five>: [RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-five'), location=Location(path='bar.py', start=Position(line=1, col=1, offset=0), end=Position(line=1, col=9, offset=8)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=1, col=1, offset=0), end=Position(line=1, col=4, offset=3), abstract_content='bar', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 5', dataflow_trace=None, rendered_fix='(bar == 2)', extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix='(bar == 2)', fix_regex=None, index=0, match_based_index=0, match_formula_string='$X == 5', is_ignored=False), RuleMatch(match=CoreMatch(rule_id=RuleId(value='eqeq-five'), location=Location(path='foo.py', start=Position(line=2, col=1, offset=9), end=Position(line=2, col=9, offset=17)), extra=CoreMatchExtra(metavars=Metavars(value={'$X': MetavarValue(start=Position(line=2, col=1, offset=9), end=Position(line=2, col=4, offset=12), abstract_content='foo', propagated_value=None)}), engine_kind=EngineKind(value=OSS()), message='useless comparison to 5', dataflow_trace=None, rendered_fix='(foo == 2)', extra_extra=None)), severity=<RuleSeverity.ERROR: 'ERROR'>, fix='(foo == 2)', fix_regex=None, index=1, match_based_index=1, match_formula_string='$X == 5', is_ignored=False)]})
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {})
                                
                                
┌──────────────────────────────┐
│ 2 Non-blocking Code Findings │
└──────────────────────────────┘
           
    bar.py 
       eqeq-five                 
          useless comparison to 5
                                 
           ▶▶┆ Autofix ▶ (bar == 2)
            1┆ bar == 5
           
    foo.py 
       eqeq-five                 
          useless comparison to 5
                                 
           ▶▶┆ Autofix ▶ (foo == 2)
            2┆ foo == 5

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files changed since baseline commit.

CI scan completed successfully.
  Found 2 findings (0 blocking) from 6 rules.
  Uploading findings.
  View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/org_name/findings
    https://semgrep.dev/orgs/org_name/supply-chain
  No blocking findings so exiting with code 0

=== end of stdout - plain

=== stderr - plain

=== end of stderr - plain