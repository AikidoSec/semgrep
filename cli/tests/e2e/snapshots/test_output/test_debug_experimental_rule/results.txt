=== command
SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep --debug --strict --config rules/experiment/experiment.yaml targets/experiment/experiment.py
=== end of command

=== exit code
0
=== end of exit code

=== stdout - plain

=== end of stdout - plain

=== stderr - plain
semgrep version <MASKED>
Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
Loading local config from rules/experiment/experiment.yaml
Done loading local config from rules/experiment/experiment.yaml
loaded 1 configs in<MASKED>
running 1 rules from 1 config rules/experiment/experiment.yaml_0
No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev<MASKED>
Rules:
Experimental Rules:
- rules.experiment.research-experiment


‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Scan Status ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
  Scanning 1 file tracked by git with 1 Code rule:
  Scanning 1 file.
Passing whole rules directly to semgrep_core
Running Semgrep engine with command:
/<MASKED>/semgrep-core -json -rules <MASKED>.json -j <MASKED> -strict -targets <MASKED> -timeout_threshold 3 -max_memory 0 -fast --debug
--- semgrep-core stderr ---
[00.00][INFO](cli, Core_CLI): Executed as: /<MASKED>/semgrep-core -json -rules <MASKED>.json -j <MASKED> -strict -targets <MASKED> -timeout_threshold 3 -max_memory 0 -fast --debug
[00.00][INFO](cli, Core_CLI): Version: semgrep-core version: <MASKED>
[00.00][INFO](Core_scan): Parsing <MASKED>:
{
  "rules": [
    {
      "id": "rules.experiment.research-experiment",
      "languages": [
        "python"
      ],
      "message": "A match was found.",
      "pattern": "print(\"...\")",
      "severity": "EXPERIMENT"
    }
  ]
}
[00.00][INFO](Core_scan): extracting nested content from 1 files
[00.00][DEBUG](Match_rules): checking targets/experiment/experiment.py with 0 rules
[00.00][INFO](Core_scan): processing 1 files, skipping 0 files
[00.02][INFO](Core_scan): Analyzing targets/experiment/experiment.py
[00.02][DEBUG](Match_rules): checking targets/experiment/experiment.py with 1 rules
[00.02][DEBUG](Pfff_or_tree_sitter): trying to parse with Pfff parser the pattern
[00.03][DEBUG](Analyze_rule): cnf0 = (Analyze_rule.And
   [(Analyze_rule.Or
       [(Analyze_rule.LPat
           { Xpattern.pat =
             (Xpattern.Sem (
                (E
                   { e =
                     (Call (
                        { e =
                          (N
                             (Id (("print", ()),
                                { id_resolved = ref (None);
                                  id_type = ref (None);
                                  id_svalue = ref (None); id_flags = ref (0);
                                  id_info_id = 7 }
                                )));
                          e_id = 0; e_range = None;
                          is_implicit_return = false },
                        ((),
                         [(Arg
                             { e = (L (String ((), ("...", ()), ())));
                               e_id = 0; e_range = None;
                               is_implicit_return = false })
                           ],
                         ())
                        ));
                     e_id = 0; e_range = None; is_implicit_return = false }),
                Python));
             pstr = ("print(\"...\")", ()); pid = 1 })
         ])
     ])
[00.04][DEBUG](Analyze_rule): cnf1 = (Analyze_rule.And
   [(Analyze_rule.Or [(Analyze_rule.StringsAndMvars (["print"], []))])])
[00.04][DEBUG](Analyze_rule): cnf2 = (Analyze_rule.And [(Analyze_rule.Or [(Analyze_rule.Idents ["print"])])])
[00.04][DEBUG](Match_rules): looking for ["Pred",["Idents",["print"]]] in targets/experiment/experiment.py
[00.04][DEBUG](Analyze_rule): check for the presence of "print"
[00.04][DEBUG](Pfff_or_tree_sitter): trying to parse with Pfff parser targets/experiment/experiment.py
[00.04][DEBUG](Naming_AST): Naming_AST.resolve program
[00.04][DEBUG](Naming_AST): could not find 'print' in environment at targets/experiment/experiment.py:1:0
[00.04][DEBUG](Naming_AST): could not find 'print' in environment at targets/experiment/experiment.py:3:0
[00.04][DEBUG](Constant_propagation): Constant_propagation.propagate_basic program
[00.05][DEBUG](Constant_propagation): Constant_propagation.propagate_dataflow program
[00.05][DEBUG](AST_to_IL): warning: targets/experiment/experiment.py:1:0: the ident 'print' is not resolved
[00.05][DEBUG](AST_to_IL): warning: targets/experiment/experiment.py:3:0: the ident 'print' is not resolved
[00.05][INFO](Parse_target): Parse_target.parse_and_resolve_name done
[00.05][DEBUG](Match_patterns): checking targets/experiment/experiment.py with 1 mini rules
[00.06][DEBUG](Match_search_mode): found 2 matches
[00.06][DEBUG](Match_search_mode): evaluating the formula
[00.06][DEBUG](Match_search_mode): found 2 final ranges
[00.06][DEBUG](Core_scan): done with targets/experiment/experiment.py
[00.15][INFO](Core_scan): found 2 matches, 0 errors
[00.15][INFO](Core_scan): there were 0 skipped targets
[00.15][INFO](Core_command): size of returned JSON string: 1159
--- end semgrep-core stderr ---
semgrep ran in <MASKED> on 1 files
findings summary: 2 experiment

========================================
Files skipped:
========================================

  Always skipped by Semgrep:

   ‚Ä¢ <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   ‚Ä¢ <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev<MASKED>

   ‚Ä¢ <none>

  Skipped by --include patterns:

   ‚Ä¢ <none>

  Skipped by --exclude patterns:

   ‚Ä¢ <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   ‚Ä¢ <none>

  Partially analyzed due to parsing or internal Semgrep errors

   ‚Ä¢ <none>



‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Scan Summary ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Ran 1 rule on 1 file: 0 findings.
Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False

=== end of stderr - plain

=== stdout - color

=== end of stdout - color

=== stderr - color
semgrep version <MASKED>
Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
Loading local config from rules/experiment/experiment.yaml
Done loading local config from rules/experiment/experiment.yaml
loaded 1 configs in<MASKED>
running 1 rules from 1 config rules/experiment/experiment.yaml_0
No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev<MASKED>
Rules:
Experimental Rules:
- rules.experiment.research-experiment


‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Scan Status ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
  Scanning 1 file tracked by git with 1 Code rule:
  Scanning 1 file.
Passing whole rules directly to semgrep_core
Running Semgrep engine with command:
/<MASKED>/semgrep-core -json -rules <MASKED>.json -j <MASKED> -strict -targets <MASKED> -timeout_threshold 3 -max_memory 0 -fast --debug
--- semgrep-core stderr ---
[00.00][[34mINFO[0m](cli, Core_CLI): Executed as: /<MASKED>/semgrep-core -json -rules <MASKED>.json -j <MASKED> -strict -targets <MASKED> -timeout_threshold 3 -max_memory 0 -fast --debug
[00.00][[34mINFO[0m](cli, Core_CLI): Version: semgrep-core version: <MASKED>
[00.00][[34mINFO[0m](Core_scan): Parsing <MASKED>:
{
  "rules": [
    {
      "id": "rules.experiment.research-experiment",
      "languages": [
        "python"
      ],
      "message": "A match was found.",
      "pattern": "print(\"...\")",
      "severity": "EXPERIMENT"
    }
  ]
}
[00.00][[34mINFO[0m](Core_scan): extracting nested content from 1 files
[00.00][[32mDEBUG[0m](Match_rules): checking targets/experiment/experiment.py with 0 rules
[00.00][[34mINFO[0m](Core_scan): processing 1 files, skipping 0 files
[00.02][[34mINFO[0m](Core_scan): Analyzing targets/experiment/experiment.py
[00.02][[32mDEBUG[0m](Match_rules): checking targets/experiment/experiment.py with 1 rules
[00.02][[32mDEBUG[0m](Pfff_or_tree_sitter): trying to parse with Pfff parser the pattern
[00.03][[32mDEBUG[0m](Analyze_rule): cnf0 = (Analyze_rule.And
   [(Analyze_rule.Or
       [(Analyze_rule.LPat
           { Xpattern.pat =
             (Xpattern.Sem (
                (E
                   { e =
                     (Call (
                        { e =
                          (N
                             (Id (("print", ()),
                                { id_resolved = ref (None);
                                  id_type = ref (None);
                                  id_svalue = ref (None); id_flags = ref (0);
                                  id_info_id = 7 }
                                )));
                          e_id = 0; e_range = None;
                          is_implicit_return = false },
                        ((),
                         [(Arg
                             { e = (L (String ((), ("...", ()), ())));
                               e_id = 0; e_range = None;
                               is_implicit_return = false })
                           ],
                         ())
                        ));
                     e_id = 0; e_range = None; is_implicit_return = false }),
                Python));
             pstr = ("print(\"...\")", ()); pid = 1 })
         ])
     ])
[00.04][[32mDEBUG[0m](Analyze_rule): cnf1 = (Analyze_rule.And
   [(Analyze_rule.Or [(Analyze_rule.StringsAndMvars (["print"], []))])])
[00.04][[32mDEBUG[0m](Analyze_rule): cnf2 = (Analyze_rule.And [(Analyze_rule.Or [(Analyze_rule.Idents ["print"])])])
[00.04][[32mDEBUG[0m](Match_rules): looking for ["Pred",["Idents",["print"]]] in targets/experiment/experiment.py
[00.04][[32mDEBUG[0m](Analyze_rule): check for the presence of "print"
[00.04][[32mDEBUG[0m](Pfff_or_tree_sitter): trying to parse with Pfff parser targets/experiment/experiment.py
[00.04][[32mDEBUG[0m](Naming_AST): Naming_AST.resolve program
[00.04][[32mDEBUG[0m](Naming_AST): could not find 'print' in environment at targets/experiment/experiment.py:1:0
[00.04][[32mDEBUG[0m](Naming_AST): could not find 'print' in environment at targets/experiment/experiment.py:3:0
[00.04][[32mDEBUG[0m](Constant_propagation): Constant_propagation.propagate_basic program
[00.05][[32mDEBUG[0m](Constant_propagation): Constant_propagation.propagate_dataflow program
[00.05][[32mDEBUG[0m](AST_to_IL): warning: targets/experiment/experiment.py:1:0: the ident 'print' is not resolved
[00.05][[32mDEBUG[0m](AST_to_IL): warning: targets/experiment/experiment.py:3:0: the ident 'print' is not resolved
[00.05][[34mINFO[0m](Parse_target): Parse_target.parse_and_resolve_name done
[00.05][[32mDEBUG[0m](Match_patterns): checking targets/experiment/experiment.py with 1 mini rules
[00.06][[32mDEBUG[0m](Match_search_mode): found 2 matches
[00.06][[32mDEBUG[0m](Match_search_mode): evaluating the formula
[00.06][[32mDEBUG[0m](Match_search_mode): found 2 final ranges
[00.06][[32mDEBUG[0m](Core_scan): done with targets/experiment/experiment.py
[00.15][[34mINFO[0m](Core_scan): found 2 matches, 0 errors
[00.15][[34mINFO[0m](Core_scan): there were 0 skipped targets
[00.15][[34mINFO[0m](Core_command): size of returned JSON string: 1159
--- end semgrep-core stderr ---
semgrep ran in <MASKED> on 1 files
findings summary: 2 experiment

========================================
Files skipped:
========================================

  Always skipped by Semgrep:

   ‚Ä¢ <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   ‚Ä¢ <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev<MASKED>

   ‚Ä¢ <none>

  Skipped by --include patterns:

   ‚Ä¢ <none>

  Skipped by --exclude patterns:

   ‚Ä¢ <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   ‚Ä¢ <none>

  Partially analyzed due to parsing or internal Semgrep errors

   ‚Ä¢ <none>



‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Scan Summary ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Ran 1 rule on 1 file: 0 findings.
Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False

=== end of stderr - color