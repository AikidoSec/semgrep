from __future__ import annotations

from typing import Any
from typing import Dict
from typing import Iterator
from typing import List
from typing import Set
from typing import Sized
from typing import Tuple
from typing import Type
from typing import Union
from uuid import UUID

def asciify(text: str, ignore: bool = ...) -> bytes: ...
def format_int_list(
    int_list: list[int],
    delim: str = ...,
    range_delim: str = ...,
    delim_space: bool = ...,
) -> str: ...
def indent(
    text: str, margin: str, newline: str = ..., key: type[bool] = ...
) -> str: ...
def is_uuid(obj: str | UUID | set[str], version: int = ...) -> bool: ...
def iter_splitlines(text: str) -> Iterator[str]: ...
def multi_replace(text: str, sub_map: dict[str, str], **kwargs: Any) -> str: ...
def parse_int_list(
    range_string: str, delim: str = ..., range_delim: str = ...
) -> list[int]: ...
def cardinalize(unit_noun: str, count: int) -> str: ...
def unit_len(sized_iterable: Sized, unit_noun: str = "item") -> str: ...

class DeaccenterDict:
    def __missing__(self, key: int) -> int: ...

class MultiReplace:
    def __init__(
        self,
        sub_map: list[tuple[str, str]] | dict[str, str],
        **kwargs: Any,
    ) -> None: ...
    def sub(self, text: str) -> str: ...
