from __future__ import annotations

from itertools import chain
from itertools import islice
from typing import Any
from typing import List
from typing import Optional
from typing import Tuple
from typing import Union

class BarrelList:
    def __delitem__(self, index: slice) -> None: ...
    def __getitem__(self, index: int | slice) -> int | BarrelList: ...
    def __init__(
        self, iterable: list[int] | range | islice | None = ...
    ) -> None: ...
    def __iter__(self) -> chain: ...
    def __len__(self) -> int: ...
    def __reversed__(self) -> chain: ...
    def __setitem__(self, index: slice, item: range) -> None: ...
    def _balance_list(self, list_idx: int) -> bool: ...
    @property
    def _cur_size_limit(self) -> int: ...
    def _translate_index(self, index: int) -> tuple[int, int]: ...
    def del_slice(self, start: int, stop: int, step: int | None = ...) -> None: ...
    def extend(self, iterable: list[int] | range | islice) -> None: ...
    @classmethod
    def from_iterable(cls, it: islice) -> BarrelList: ...
    def insert(self, index: int, item: int) -> None: ...
    def iter_slice(
        self, start: int, stop: int, step: int | None = ...
    ) -> islice: ...
    def pop(self, *a: Any) -> int: ...
    def sort(self) -> None: ...

class SplayList:
    def shift(self, item_index: int, dest_index: int = ...) -> None: ...
    def swap(self, item_index: int, dest_index: int) -> None: ...
