(*
   Type definitions for semgrep-core's JSON input, coming from the
   python wrapper, 'semgrep'.

   There are other very important form of inputs which are not specified here:
    - The rule syntax and schema (see rule_schema_v1.yaml; only the
      semgrep matching engine options are specified in Config_semgrep.atd)
    - The syntax for all the target files (see the grammar for the different
      tree-sitter and pfff parsers)
*)

(*****************************************************************************)
(* Targets *)
(*****************************************************************************)

(* For -targets.
 * coupling: if you change the type here, you probably also want to change
 * tests/e2e/target
*)

type xlang <ocaml attr="deriving show"> = string wrap <ocaml module="Xlang">

type target <ocaml attr="deriving show"> = {
  path: string (* source file *);
  (* Must be a valid "language" as defined in Xlang.mli.
     examples: "ocaml", "python", but also "spacegrep" or "regexp".
     less: would be great to use Lang.t here, but atd does not
     allow (by design) to use types defined in other files. *)
  language: xlang;
  (* Index in the rule_ids list in targets of the rule_id to
   * run this target on *)
  rule_nums: int list;
}

(* The same path can be present multiple times in targets below, with
 * different languages each time, so a Python file can be both analyzed
 * with Python rules, but also with generic/regexp rules.
 *
 * To avoid repeating the rule_ids, targets contains a list of all the
 * rule_ids and each target references the index of the rule_id
 *
 * alt: we could have a list of languages instead in target above, but
 * because of the way semgrep-core is designed (with its file_and_more type),
 * you could have at most one PL language, and then possibly
 * "generic" and "regexp".
 *
 * alt: rule_ids above could also be used to analyze at once the same
 * file with both PL and generic/regexp rules.
 *)
type targets <ocaml attr="deriving show"> = {
   target_mappings: target list;
   (* If there is no rule_id, the default we will use is '-' *)
   rule_ids: string list
}


(*****************************************************************************)
(* Synthesizing from diffs (see locate_patched_functions in Synthesizing.mli) *)
(*****************************************************************************)

type diff_file <ocaml attr="deriving show"> = {
  filename : string;
  diffs : string (* start_line-end_line *) list;
  url : string (* metadata to help SCA rule generation *)
}

type diff_files <ocaml attr="deriving show"> = {
  cve_diffs : diff_file list;
}

(*****************************************************************************)
(* Synthesizing rules from ML generated skeletons *)
(*****************************************************************************)

type matching_operation_limited
  <ocaml attr="deriving show { with_path = false}">
  <python decorator="dataclass(frozen=True)"> = [
  | And
  | Or
  | Inside
  (* XPat for eXtended pattern. Can be a spacegrep pattern, a
   * regexp pattern, or a proper semgrep pattern.
   * see semgrep-core/src/core/XPattern.ml
   *)
  | XPat
  (* TODO *)
  | Negation
  (* TODO "metavar-regex:xxx" | "metavar-comparison:xxx" | "metavar-pattern" *)
  | Filter of string
  (* TODO tainting "operations" *)
  | Taint
  | TaintSource
  | TaintSink
  | TaintSanitizer
  (* TODO subpatterns *)
  | EllipsisAndStmts
  | ClassHeaderAndElems
] <ocaml repr="classic">

type rule_skeleton <ocaml attr="deriving show"> = {
    op: matching_operation_limited;
    ?children: rule_skeleton list option;
    (* result match strings at this node *)
    matches: string list;
}

type rule_skeletons <ocaml attr="deriving show"> = rule_skeleton list
